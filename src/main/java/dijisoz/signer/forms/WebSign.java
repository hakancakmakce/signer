/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dijisoz.signer.forms;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;

import dijisoz.signer.document.Document;
import dijisoz.signer.document.DocumentServiceClient;
import dijisoz.signer.document.SignedDocument;
import dijisoz.signer.esign.SignInfo;
import dijisoz.signer.esign.SignResult;
import dijisoz.signer.esign.SignStrategy;
import dijisoz.signer.esign.SignStrategyFactory;
import dijisoz.signer.esign.smartcard.Manager;
import sun.security.pkcs11.wrapper.PKCS11Exception;
import tr.gov.tubitak.uekae.esya.api.asn.x509.ECertificate;
import tr.gov.tubitak.uekae.esya.api.common.ESYAException;
import tr.gov.tubitak.uekae.esya.api.smartcard.pkcs11.SmartCardException;

/**
 *
 * @author hakan
 */
@SuppressWarnings("restriction")
public class WebSign extends javax.swing.JFrame {
    private final SignInfo signInfo;
    private final JFrame parent;
    private final Timer timer;
    private boolean timerRunning;
    private Manager manager;
    private final Document document;
    /**
     * Creates new form WebSign
     * @param signInfo
     * @param parent
     */
    public WebSign(SignInfo signInfo, JFrame parent, Document document) {
        this.signInfo = signInfo;
        this.document = document;
        initComponents();
        this.parent = parent;
        if(this.parent != null) {
            setLocationRelativeTo(parent);
            //this.parent.setEnabled(false);
        }
        jEditorPane1.addHyperlinkListener(new WebSign.HyperlinkClickListener());
        String p = "<html>File Info:<br>" + "Name: <a href=\"file:///" + signInfo.getFile().getAbsolutePath() + "\">" + signInfo.getFile().getName()+ "</a><br>" + "</html>";
        jEditorPane1.setText(p);
        
        AddListenerToPassword();
        timer = new Timer(30000, (ActionEvent e) -> {
            // Timer tetiklendiğinde şifreyi temizle
            passwordTxt.setText("");
        });
        
        try {
            manager = Manager.getInstance();
        } catch (SmartCardException ex) {
            Logger.getLogger(WebSign.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private class HyperlinkClickListener implements HyperlinkListener {
        @Override
        public void hyperlinkUpdate(HyperlinkEvent e) {
            if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                try {
                    Desktop.getDesktop().open(new File(e.getURL().toURI()));
                } catch (IOException | java.net.URISyntaxException ex) {
                    System.err.println(ex);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        label1 = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        passwordTxt = new javax.swing.JPasswordField();
        signBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jEditorPane1.setEditable(false);
        jEditorPane1.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(jEditorPane1);

        label1.setText("İmzalanacak Doküman");

        jLabel1.setText("Şifre");

        passwordTxt.setToolTipText("");
        passwordTxt.addActionListener(this::passwordTxtActionPerformed);

        signBtn.setText("İmzala");
        signBtn.setEnabled(false);
        signBtn.addActionListener(this::signBtnActionPerformed);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(signBtn)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(passwordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(signBtn)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void signBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signBtnActionPerformed
        String password = new String(passwordTxt.getPassword());
        signInfo.setPassword(password);
        try {
            String terminal = Manager.getTerminals()[0];
            ECertificate certificate = manager.getSignatureCertificate(terminal).get(0);
            signInfo.setECertificate(certificate);
        } catch (ESYAException ex) {
            System.out.println(ex);
        } catch (IOException | PKCS11Exception ex) {
            Logger.getLogger(WebSign.class.getName()).log(Level.SEVERE, null, ex);
        }
        SignStrategy strategy = SignStrategyFactory.getSignStrategy(signInfo);
        SignResult<Object> signResult = strategy.sign();

        File file = new File(signResult.getDocumentPath());
        byte[] fileByte = null;
        try {
            fileByte = Files.readAllBytes(file.toPath());
        } catch (IOException e) {
            System.out.println(e);
        }

        String fileString = Base64.getEncoder().encodeToString(fileByte);
        SignedDocument signedDocument = dijisoz.signer.document.SignedDocument.builder().content(fileString)
        .id(document.getId()).build();

        boolean uploaded = DocumentServiceClient.uploadDocument(signedDocument);
        System.err.println(uploaded);
    }//GEN-LAST:event_signBtnActionPerformed

    private void passwordTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordTxtActionPerformed
        
    }//GEN-LAST:event_passwordTxtActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        dispose();   
    }//GEN-LAST:event_formWindowClosed
    
        private void AddListenerToPassword(){
        passwordTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateButtonState();
                UpdateTimerState();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateButtonState();
                UpdateTimerState();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateButtonState();
                UpdateTimerState();
            }

            private void updateButtonState() {
                // Şifreyi al ve buton durumunu güncelle
                String password = new String(passwordTxt.getPassword());
                signBtn.setEnabled(password.length() > 0);
            }
        });
    }
        
    private void UpdateTimerState() {
        if(passwordTxt.getPassword().length > 0){
            if(!timerRunning){
                timer.start();
                timerRunning = true;
            }
        } else {
            timer.stop();
            timerRunning = false;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WebSign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new WebSign(null, null, null).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private javax.swing.JPasswordField passwordTxt;
    private javax.swing.JButton signBtn;
    // End of variables declaration//GEN-END:variables
}
