/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dijisoz.signer.forms;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.security.cert.CertificateEncodingException;
import java.security.cert.X509Certificate;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JTree;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;

import dijisoz.signer.esign.SignInfo;
import dijisoz.signer.esign.SignStrategy;
import dijisoz.signer.esign.SignStrategyFactory;
import dijisoz.signer.esign.SignStructure;
import dijisoz.signer.esign.smartcard.Manager;
import sun.security.pkcs11.wrapper.PKCS11Exception;
import tr.gov.tubitak.uekae.esya.api.asn.x509.ECertificate;
import tr.gov.tubitak.uekae.esya.api.common.ESYAException;
import tr.gov.tubitak.uekae.esya.api.common.crypto.Algorithms;
import tr.gov.tubitak.uekae.esya.api.crypto.alg.DigestAlg;
import tr.gov.tubitak.uekae.esya.api.crypto.params.RSAPSSParams;
import tr.gov.tubitak.uekae.esya.api.signature.SignatureFormat;
import tr.gov.tubitak.uekae.esya.api.signature.SignatureType;

/**
 *
 * @author hakan
 */
@SuppressWarnings("restriction")
public class Sign extends javax.swing.JFrame {

    private Manager manager;
    private TreeModel treeModel;
    DefaultListModel<String> listModel = new DefaultListModel<>();
    List<ECertificate> certificates;
    private File signedFile;
    private final JFrame parent;
    private Timer timer;
    private boolean timerRunning;

    /**
     * Creates new form Sign
     *
     * @param fileToBeSigned
     * @param parent
     */
    public Sign(File fileToBeSigned, JFrame parent) {
        initComponents();
        signedFile = fileToBeSigned;
        this.parent = parent;
        if(this.parent != null) {
            setLocationRelativeTo(parent);
            this.parent.setEnabled(false);
        }
      
        //certificateTree.setCellRenderer(new CertificateTreeCellRenderer());
        AddListenerToPassword();
        timer = new Timer(30000, (ActionEvent e) -> {
            // Timer tetiklendiğinde şifreyi temizle
            passwordTxt.setText("");
        });
        try {
            manager = Manager.getInstance();
            String[] terminals = Manager.getTerminals();
            for (String terminal : terminals) {
                cardReaderCb.addItem(terminal);
            }

        } catch (ESYAException ex) {
            System.out.println(ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cardReaderCb = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        certificateTree = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        signFormatCb = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        signTypeCb = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        signAlgorithmCb = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        signStructureCb = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        passwordTxt = new javax.swing.JPasswordField();
        signBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("Kart Okuyucu Seçin : ");

        cardReaderCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kart Okuyucu" }));
        cardReaderCb.addActionListener(this::cardReaderCbActionPerformed);

        certificateTree.setModel(treeModel);
        certificateTree.setCellRenderer(new CertificateTreeCellRenderer());
        certificateTree.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                certificateTreeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(certificateTree);

        jLabel2.setText("İmza Formatı Seçin :");

        signFormatCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "İmza Formatı", "CAdES", "PAdES", "XAdES" }));
        signFormatCb.addActionListener(this::signFormatCbActionPerformed);

        jLabel3.setText("İmza Tipi Seçin :");

        signTypeCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "İmza Tipi", "Bes ", "Zaman Damgalı", "Uzun Dönemli" }));
        signTypeCb.addActionListener(this::signTypeCbActionPerformed);

        jLabel4.setText("İmza Algoritması Seçin :");

        signAlgorithmCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "İmza Algoritması", "RSA_SHA_256", "RSA_SHA_512", "RSA_PSS_SHA_256", "RSA_PSS_SHA_512" }));
        signAlgorithmCb.addActionListener(this::signAlgorithmCbActionPerformed);

        jLabel5.setText("İmza Yapısı Seçin :");

        signStructureCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "İmza Yapısı", "Bütünleşik", "Ayrık" }));
        signStructureCb.setEnabled(false);
        signStructureCb.addActionListener(this::signStructureCbActionPerformed);

        jLabel6.setText("Kart Şifresi :");

        passwordTxt.setEditable(false);
        passwordTxt.setToolTipText("");

        signBtn.setText("İmzala");
        signBtn.setEnabled(false);
        signBtn.addActionListener(this::signBtnActionPerformed);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cardReaderCb, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(signTypeCb, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(signStructureCb, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(signFormatCb, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(signAlgorithmCb, 0, 135, Short.MAX_VALUE)
                                    .addComponent(passwordTxt))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(signBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cardReaderCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(signFormatCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signStructureCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signTypeCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signAlgorithmCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(passwordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(signBtn)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cardReaderCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardReaderCbActionPerformed
        listModel.removeAllElements();
        String selectedReader = (String) cardReaderCb.getSelectedItem();
        int selectedIndex = cardReaderCb.getSelectedIndex();
        SetPasswordEditible();
        if (selectedIndex == 0) {
            certificateTree.setModel(null);
            certificateTree.setVisible(false);
        } else {
            certificateTree.setVisible(true);
            try {
                certificateTree.removeAll();
                DefaultMutableTreeNode root = new DefaultMutableTreeNode(selectedReader);
                certificates = manager.getSignatureCertificate(selectedReader);
                for (ECertificate certificate : certificates) {
                    DefaultMutableTreeNode certNode = new DefaultMutableTreeNode(certificate);
                    root.add(certNode);
                    listModel.addElement(certificate.getSubject().getSerialNumberAttribute());
                    treeModel = new DefaultTreeModel(root);
                    certificateTree.setModel(treeModel);
                }
            } catch (ESYAException | IOException | PKCS11Exception ex) {
                Logger.getLogger(Sign.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cardReaderCbActionPerformed

    private void certificateTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_certificateTreeMouseClicked
        SetPasswordEditible();
        if (evt.getClickCount() == 2) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) certificateTree.getLastSelectedPathComponent();
            if (selectedNode == null) {
                return;
            }
            if (selectedNode.getUserObject() instanceof ECertificate) {
                File certFile;
                try {
                    certFile = File.createTempFile("certificate", ".crt");
                    try (FileOutputStream fos = new FileOutputStream(certFile)) {
                        ECertificate eCertificate = (ECertificate) selectedNode.getUserObject();
                        fos.write(eCertificate.asX509Certificate().getEncoded());
                    }
                    String command = "cmd /c start \"\" \"" + certFile.getAbsolutePath() + "\"";

                    Process process = Runtime.getRuntime().exec(command);

                    // Komut çıktısını oku
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
                    String line;
                    while ((line = reader.readLine()) != null) {
                        System.out.println(line);
                    }

                    // Komut çalışmasını bekle
                    int exitCode = process.waitFor();
                    System.out.println("Komut çıkış kodu: " + exitCode);
                } catch (IOException | CertificateEncodingException | InterruptedException ex) {
                    Logger.getLogger(Sign.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_certificateTreeMouseClicked

    private void signTypeCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signTypeCbActionPerformed
        SetPasswordEditible();
    }//GEN-LAST:event_signTypeCbActionPerformed

    private void signBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        SignatureFormat signFormat = SignatureFormat.valueOf((String)signFormatCb.getSelectedItem());
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) certificateTree.getLastSelectedPathComponent();
        ECertificate eCertificate = (ECertificate) selectedNode.getUserObject();
        String password = new String(passwordTxt.getPassword());
        String algorithm = GetAlgorithm();
        RSAPSSParams param = GetRsaPssParam();
        SignInfo signInfo = SignInfo.builder()
                .file(signedFile)
                .algorithm(algorithm)
                .algorithmParams(param)
                .eCertificate(eCertificate)
                .format(signFormat)
                .isQualified(true)
                .password(password)
                .structure(GetSignStructure())
                .type(GetSignatureType()).build();

        SignStrategy strategy = SignStrategyFactory.getSignStrategy(signInfo);
        strategy.sign();
        //strategy.validate();
    }

    private void signStructureCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signStructureCbActionPerformed
        SetPasswordEditible();
    }//GEN-LAST:event_signStructureCbActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if(this.parent != null) {
            this.parent.setEnabled(true);
            this.parent.toFront();
            this.parent.requestFocus();
        } 
    }//GEN-LAST:event_formWindowClosed

    private void signFormatCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signFormatCbActionPerformed
        int selectedIndex = signFormatCb.getSelectedIndex(); 
        SignFormatChanged(selectedIndex);
        SetPasswordEditible();
    }//GEN-LAST:event_signFormatCbActionPerformed

    private void signAlgorithmCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signAlgorithmCbActionPerformed
        SetPasswordEditible();
    }//GEN-LAST:event_signAlgorithmCbActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Sign(null, null).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cardReaderCb;
    private javax.swing.JTree certificateTree;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPasswordField passwordTxt;
    private javax.swing.JComboBox<String> signAlgorithmCb;
    private javax.swing.JButton signBtn;
    private javax.swing.JComboBox<String> signFormatCb;
    private javax.swing.JComboBox<String> signStructureCb;
    private javax.swing.JComboBox<String> signTypeCb;
    // End of variables declaration//GEN-END:variables

    public class CertificateTreeCellRenderer extends DefaultTreeCellRenderer {

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected,
                boolean expanded, boolean leaf, int row, boolean hasFocus) {
            Component renderer = super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);

            if (value instanceof DefaultMutableTreeNode) {
                Object nodeObject = ((DefaultMutableTreeNode) value).getUserObject();

                if (nodeObject instanceof X509Certificate) {
                    X509Certificate cert = (X509Certificate) nodeObject;

                    // Sertifikadan belirli bir bilgiyi al
                    String displayText = "Subject: " + cert.getSubjectDN().getName() + "-" + cert.getSigAlgName();

                    // Görünüm metnini ayarla
                    setText(displayText);
                }
            }

            return renderer;
        }
    }
    
    private void SignFormatChanged(int index){
        signStructureCb.removeAllItems();
        signStructureCb.addItem("İmza Yapısı");
        if(index ==0){
            signStructureCb.setEnabled(false);
        } else {
            signStructureCb.addItem("Bütünleşik");
            signStructureCb.addItem("Ayrık");
            
            if(index == 3)
                signStructureCb.addItem("Zarflanmış");
            
            signStructureCb.setEnabled(true);
        }
    }
    
    private boolean CheckEnablePassword(){
        if(cardReaderCb.getSelectedIndex() == 0)
            return false;
        
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) certificateTree.getLastSelectedPathComponent();
        if(selectedNode == null)
            return false;
        
        if(signFormatCb.getSelectedIndex() == 0)
            return false;
        
        if(signStructureCb.getSelectedIndex() == 0)
            return false;
        
        if(signTypeCb.getSelectedIndex() == 0)
            return false;
        
        return signAlgorithmCb.getSelectedIndex() != 0;
    }
    
    private void SetPasswordEditible(){
        boolean isSignible = CheckEnablePassword();
        if(!isSignible) {
            passwordTxt.setText("");
        }
        
        passwordTxt.setEditable(isSignible);
    }
    
    private void AddListenerToPassword(){
        passwordTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateButtonState();
                UpdateTimerState();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateButtonState();
                UpdateTimerState();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateButtonState();
                UpdateTimerState();
            }

            private void updateButtonState() {
                // Şifreyi al ve buton durumunu güncelle
                String password = new String(passwordTxt.getPassword());
                signBtn.setEnabled(password.length() > 0);
            }
        });
    }
    
    private String GetAlgorithm(){
        String algorithm;
        int index = signAlgorithmCb.getSelectedIndex();
        
        switch(index){
            case 1: 
                algorithm = Algorithms.DIGEST_SHA256;
                break;
            case 2:
                algorithm = Algorithms.SIGNATURE_RSA_SHA512;
                break;
            case 3:
                algorithm = Algorithms.SIGNATURE_RSA_PSS;
                break;
            case 4:
                algorithm = Algorithms.SIGNATURE_RSA_PSS;
                break;
            default:
                algorithm = "";
                break;
        }
        
        
        return algorithm;
    }

    private RSAPSSParams GetRsaPssParam(){
        RSAPSSParams param;
        int index = signAlgorithmCb.getSelectedIndex();
        
        switch(index){
            case 1:
                param = null;
                break;
            case 2:
                param = null;
                break;
            case 3:
                param = new RSAPSSParams(DigestAlg.SHA256);
                break;
            case 4:
                param = new RSAPSSParams(DigestAlg.SHA512);
                break;
            default:
                param = null;
                break;
        }
        
        
        return param;
    }

    private SignStructure GetSignStructure(){
        SignStructure structure;
        int index = signStructureCb.getSelectedIndex();

        switch(index){
            case 1:
                structure = SignStructure.INTEGRATED;
                break;
            case 2:
                structure = SignStructure.SEPARATED;
                break;
            case 3:
                structure = SignStructure.ENVELOPED;
                break;
            default:
                structure = null;
                break;
        }
        
        return structure;
    }

    private SignatureType GetSignatureType(){
        SignatureType type = null;
        int index = signTypeCb.getSelectedIndex();

        switch (index) {
            case 1:
                type = SignatureType.ES_BES;
                break;
            case 2:
                type = SignatureType.ES_T;
                break;
            case 3:
                type = SignatureType.ES_XL;
                break;
            default:
                throw new AssertionError();
        }

        return type;
    }
    
    private void UpdateTimerState() {
        if(passwordTxt.getPassword().length > 0){
            if(!timerRunning){
                timer.start();
                timerRunning = true;
            }
        } else {
            timer.stop();
            timerRunning = false;
        }
    }
}
